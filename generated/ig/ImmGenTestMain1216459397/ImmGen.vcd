$version Generated by VerilatedVcd $end
$date Sun Apr  3 15:40:47 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 # clock $end
  $var wire 64 * io_b_imm [63:0] $end
  $var wire 64 & io_i_imm [63:0] $end
  $var wire 32 % io_instruction [31:0] $end
  $var wire 64 . io_j_imm [63:0] $end
  $var wire 64 ( io_s_imm [63:0] $end
  $var wire 64 , io_u_imm [63:0] $end
  $var wire  1 $ reset $end
  $scope module ImmGen $end
   $var wire  1 # clock $end
   $var wire 12 0 i_imm_12 [11:0] $end
   $var wire 64 * io_b_imm [63:0] $end
   $var wire 64 & io_i_imm [63:0] $end
   $var wire 32 % io_instruction [31:0] $end
   $var wire 64 . io_j_imm [63:0] $end
   $var wire 64 ( io_s_imm [63:0] $end
   $var wire 64 , io_u_imm [63:0] $end
   $var wire  1 $ reset $end
   $var wire 12 3 s_imm_12 [11:0] $end
   $var wire  5 1 s_lower_half [4:0] $end
   $var wire  7 2 s_upper_half [6:0] $end
   $var wire  1 6 sb_11thbit $end
   $var wire  1 7 sb_12thbit $end
   $var wire 13 8 sb_imm_13 [12:0] $end
   $var wire  4 4 sb_lower_half [3:0] $end
   $var wire  6 5 sb_upper_half [5:0] $end
   $var wire 20 9 u_imm_20 [19:0] $end
   $var wire 64 : u_imm_64 [63:0] $end
   $var wire  1 = uj_11thbit $end
   $var wire 21 ? uj_imm_21 [20:0] $end
   $var wire 10 < uj_lower_half [9:0] $end
   $var wire  8 > uj_upper_half [7:0] $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
0#
1$
b00000000000000000000000000000000 %
b0000000000000000000000000000000000000000000000000000000000000000 &
b0000000000000000000000000000000000000000000000000000000000000000 (
b0000000000000000000000000000000000000000000000000000000000000000 *
b0000000000000000000000000000000000000000000000000000000000000000 ,
b0000000000000000000000000000000000000000000000000000000000000000 .
b000000000000 0
b00000 1
b0000000 2
b000000000000 3
b0000 4
b000000 5
06
07
b0000000000000 8
b00000000000000000000 9
b0000000000000000000000000000000000000000000000000000000000000000 :
b0000000000 <
0=
b00000000 >
b000000000000000000000 ?
#1
1#
#2
0#
#3
1#
#4
0#
#5
1#
#6
0#
#7
1#
#8
0#
#9
1#
#10
0#
0$
b00000000110000000110111010010011 %
b0000000000000000000000000000000000000000000000000000000000001100 &
b0000000000000000000000000000000000000000000000000000000000011101 (
b0000000000000000000000000000000000000000000000000000100000011100 *
b0000000000000000000000000000000000000000110000000110000000000000 ,
b0000000000000000000000000000000000000000000000000110000000001100 .
b000000001100 0
b11101 1
b000000011101 3
b1110 4
16
b0100000011100 8
b00000000110000000110 9
b0000000000000000000000000000000000000000000000000000110000000110 :
b0000000110 <
b00000110 >
b000000110000000001100 ?
#11
1#
#12
0#
b00000000011111101010001000100011 %
b0000000000000000000000000000000000000000000000000000000000000111 &
b0000000000000000000000000000000000000000000000000000000000000100 (
b0000000000000000000000000000000000000000000000000000000000000100 *
b0000000000000000000000000000000000000000011111101010000000000000 ,
b0000000000000000000000000000000000000000000011101010100000000110 .
b000000000111 0
b00100 1
b000000000100 3
b0010 4
06
b0000000000100 8
b00000000011111101010 9
b0000000000000000000000000000000000000000000000000000011111101010 :
b0000000011 <
1=
b11101010 >
b011101010100000000110 ?
#13
1#
#14
0#
b00000000010101000000010001100011 %
b0000000000000000000000000000000000000000000000000000000000000101 &
b0000000000000000000000000000000000000000000000000000000000001000 (
b0000000000000000000000000000000000000000000000000000000000001000 *
b0000000000000000000000000000000000000000010101000000000000000000 ,
b0000000000000000000000000000000000000000000001000000100000000100 .
b000000000101 0
b01000 1
b000000001000 3
b0100 4
b0000000001000 8
b00000000010101000000 9
b0000000000000000000000000000000000000000000000000000010101000000 :
b0000000010 <
b01000000 >
b001000000100000000100 ?
#15
1#
#16
0#
#17
1#
